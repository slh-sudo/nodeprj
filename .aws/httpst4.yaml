AWSTemplateFormatVersion: "2010-09-09"
Description: "Integrated VPC with ECS Cluster, Task Definition, Task Template, and ALB with HTTPS"

Parameters:
  EnvironmentName:
    Type: String
    Default: "development"
    Description: "Name of the environment"
  VPCName:
    Type: String
    Default: "MyVPC"
    Description: "The name of the VPC"
  CIDRBlock:
    Type: String
    Default: "10.0.0.0/16"
    Description: "CIDR block for the VPC"
  PublicSubnetCIDR1:
    Type: String
    Default: "10.0.1.0/24"
    Description: "CIDR block for the first public subnet"
  PublicSubnetCIDR2:
    Type: String
    Default: "10.0.2.0/24"
    Description: "CIDR block for the second public subnet"
  PrivateSubnetCIDR1:
    Type: String
    Default: "10.0.3.0/24"
    Description: "CIDR block for the first private subnet"
  PrivateSubnetCIDR2:
    Type: String
    Default: "10.0.4.0/24"
    Description: "CIDR block for the second private subnet"
  ContainerImage:
    Type: String
    Description: "Container image"
    Default: "050451396187.dkr.ecr.ap-northeast-1.amazonaws.com/learning/my-app:v1.2"
  ContainerPort:
    Type: Number
    Description: "Port for the container"
    Default: 80
  Cpu:
    Type: Number
    Description: "Task CPU (vCPU)"
    Default: 256
  Memory:
    Type: Number
    Description: "Task Memory (MiB)"
    Default: 512
  DesiredTaskCount:
    Type: Number
    Description: "Desired number of tasks"
    Default: 1
  CertificateArn:
    Type: String
    Description: "ARN of the ACM Certificate for HTTPS"
    Default: "arn:aws:acm:ap-northeast-1:050451396187:certificate/7ea0267b-5aad-4e8b-bae9-4b30a18746b6"
  ListenerPort:
    Type: Number
    Default: 443
    Description: "Port for ALB Listener"
  TargetGroupName:
    Type: String
    Default: "EcsTargetGroup"
    Description: "Name of the Target Group"
  TargetGroupPort:
    Type: Number
    Default: 80
    Description: "Port for Target Group"
  TargetGroupProtocol:
    Type: String
    Default: HTTP
    Description: "Protocol for Target Group"
    
Resources:
  # VPC
  MyVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref CIDRBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpc

  # Internet Gateway
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Route Table
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-rt

  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # Private Route Table
  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-rt

  # Public Subnets
  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnetCIDR1
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-subnet-1

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnetCIDR2
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-subnet-2

  # Private Subnets
  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnetCIDR1
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-subnet-1

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnetCIDR2
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-subnet-2

  # Subnet to Route Table Associations
  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Group for Public Subnet
  PublicSubnetSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security Group for Public Subnets"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-sg

  # Security Group for Private Subnet
  PrivateSubnetSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security Group for Private Subnets"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-sg
          
  # Security Group for ALB (Allow HTTPS from Internet)
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ALB with HTTPS access from internet"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
         - Key: Name
           Value: !Sub ${EnvironmentName}-alb-sg

  # Security Group for Interface Endpoints
  VPCEndpointSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security Group for VPC Endpoints"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref PrivateSubnetCIDR1
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref PrivateSubnetCIDR2
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-endpoint-sg

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-alb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Scheme: internet-facing
      Type: application

  # Target Group
  EcsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-tg
      Port: !Ref TargetGroupPort
      Protocol: !Ref TargetGroupProtocol
      VpcId: !Ref MyVPC
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthCheckPath: /
      Matcher:
        HttpCode: "200-399"
      TargetType: ip

  # HTTPS Listener
  ALBHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: !Ref ListenerPort
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EcsTargetGroup

  # S3 VPC Endpoint (Gateway Type)
  S3VPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref PrivateRouteTable
      VpcEndpointType: Gateway
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-s3-endpoint

  # ECR DKR VPC Endpoint (Interface Type)
  ECRDockerVPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.dkr"
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ecr-dkr-endpoint

  # ECR API VPC Endpoint (Interface Type)
  ECRApiVPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.api"
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ecr-api-endpoint
  
  # CloudWatch Logs VPC Endpoint (Interface Type)
  CloudWatchLogsVPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.logs"
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-cloudwatch-logs-endpoint

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-app-log
      
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-ecs-cluster

  # Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-taskdef
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: app-container
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: app

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBHTTPSListener
    Properties:
      ServiceName: !Sub ${EnvironmentName}-ecs-svc
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      DesiredCount: !Ref DesiredTaskCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1 
            - !Ref PrivateSubnet2 
          SecurityGroups:
            - !Ref PrivateSubnetSG
      PlatformVersion: LATEST
      LoadBalancers:
        - TargetGroupArn: !Ref EcsTargetGroup
          ContainerName: app-container
          ContainerPort: !Ref ContainerPort

  # IAM Roles for ECS
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSTaskExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSTaskPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                    - "s3:*"
                Resource: "*"

Outputs:
  ClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
  ServiceName:
    Description: ECS Service Name
    Value: !Ref ECSService
  VPCId:
    Description: "The ID of the created VPC"
    Value: !Ref MyVPC
    Export:
      Name: "VPCId"
  PublicSubnet1Id:
    Description: "The ID of the first public subnet"
    Value: !Ref PublicSubnet1
    Export:
      Name: "PublicSubnet1Id"
  PublicSubnet2Id:
    Description: "The ID of the second public subnet"
    Value: !Ref PublicSubnet2
    Export:
      Name: "PublicSubnet2Id"
  PrivateSubnet1Id:
    Description: "The ID of the first private subnet"
    Value: !Ref PrivateSubnet1
    Export:
      Name: "PrivateSubnet1Id"
  PrivateSubnet2Id:
    Description: "The ID of the second private subnet"
    Value: !Ref PrivateSubnet2
    Export:
      Name: "PrivateSubnet2Id"
  LoadBalancerDNSName:
    Description: "DNS Name of the Load Balancer"
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: "LoadBalancerDNSName"
  LoadBalancerArn:
    Description: "ARN of the Load Balancer"
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: "LoadBalancerArn"
  ALBSecurityGroupId:
    Description: "ID of Security Group"
    Value: !GetAtt ALBSecurityGroup.GroupId
    Export:
      Name: "ALBSecurityGroupId"
  TargetGroupArn:
    Description: "ARN of the Target Group"
    Value: !Ref EcsTargetGroup
    Export:
      Name: "TargetGroupArn"